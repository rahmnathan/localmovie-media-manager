apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  labels:
    app: localmovies
  name: localmovies
spec:
  replicas: 1
  selector:
    matchLabels:
      app: localmovies
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: localmovies
    spec:
      containers:
        - image: {{.Values.localmovies.imageRepository}}/localmovie-media-manager:@project.version@
          imagePullPolicy: Always
          name: localmovies
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: application-config
              mountPath: /opt/localmovie/config
              readOnly: true
            - name: media1
              mountPath: /opt/localmovie/1/LocalMedia
            - name: media2
              mountPath: /opt/localmovie/2/LocalMedia
            - name: media3
              mountPath: /opt/localmovie/3/LocalMedia
            - name: secrets
              mountPath: /opt/localmovie/secrets
              readOnly: true
          resources:
            requests:
              cpu: "2"
              memory: "4Gi"
            limits:
              cpu: "8"
              memory: "8Gi"
      volumes:
        - name: media1
          nfs:
            server: 192.168.1.189
            path: /LocalMedia1
        - name: media2
          nfs:
            server: 192.168.1.189
            path: /LocalMedia2
        - name: media3
          nfs:
            server: 192.168.1.189
            path: /LocalMedia3
        - name: application-config
          configMap:
            name: localmovies
            items:
              - key: bootstrap.properties
                path: bootstrap.properties
        - name: secrets
          secret:
            # Create this secret via: kubectl create secret generic localmovie-firebase-key --from-file=localmovie-firebase-key.json
            secretName: localmovie-firebase-key
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30